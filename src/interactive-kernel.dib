#!csharp

#r "../artifacts/bin/IxMilia.Lisp/Debug/netstandard1.3/IxMilia.Lisp.dll"

#!csharp

using System.Threading.Tasks;
using IxMilia.Lisp;
using Microsoft.CodeAnalysis;
using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Commands;
using Microsoft.DotNet.Interactive.Events;

class LispKernel : Kernel, IKernelCommandHandler<SubmitCode>
{
    private LispRepl _repl;

    public LispKernel()
        : base("lisp")
    {
        _repl = new LispRepl();
    }

    public Task HandleAsync(SubmitCode command, KernelInvocationContext context)
    {
        var result = _repl.Eval(command.Code, consumeIncompleteInput: false);
        switch (result.ExecutionState.LastResult)
        {
            case LispError err:
                var start = new LinePosition(0, 0);
                var end = new LinePosition(0, 0);
                if (err.SourceLocation.HasValue)
                {
                    start = new LinePosition(err.SourceLocation.Value.Start.Line - 1, err.SourceLocation.Value.Start.Column - 1);
                    end = new LinePosition(err.SourceLocation.Value.End.Line - 1, err.SourceLocation.Value.End.Column - 1);
                }

                var diag = new Microsoft.DotNet.Interactive.Diagnostic(new LinePositionSpan(start, end), DiagnosticSeverity.Error, "LISP0001", err.Message);
                var diags = new[] { diag };
                context.Publish(new DiagnosticsProduced(diags, command));
                context.Fail(command, null, $"{err.SourceLocation?.Start.Line}, {err.SourceLocation?.Start.Column} - {err.Message}");
                break;  
            case LispObject obj:
                var formatted = new FormattedValue("text/plain", obj.ToString()); // TODO: return strings, ints, etc.
                context.Publish(new ReturnValueProduced(obj, command, new[] { formatted }));
                context.Publish(new DiagnosticsProduced(new Microsoft.DotNet.Interactive.Diagnostic[0], command));
                break;
        }

        return Task.CompletedTask;
    }
}

((CompositeKernel)Kernel.Root.RootKernel).Add(new LispKernel());

#!csharp

#!lisp
(+ 1 2 3 four 5 6)
